# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # MediaController
  class MediaController < BaseController
    # Used to upload media. All media files sent through this endpoint are
    # encrypted and persist for 30 days.
    # @param [String] phone_number_id Required parameter: Example:
    # @param [String] messaging_product Required parameter: Messaging service
    # used for the request. In this case, use whatsapp.
    # @param [String] file Required parameter: Path to the file stored in your
    # local directory. For example: "@/local/path/file.jpg".
    # @param [String] type Required parameter: Type of media file being
    # uploaded. See Supported Media Types for more information.    Supported
    # options for images are: `image/jpeg`, `image/png`    Supported options for
    # documents are: `text/plain`, `application/pdf`,
    # `application/vnd.ms-powerpoint`, `application/msword`,
    # `application/vnd.ms-excel`,
    # `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
    # `application/vnd.openxmlformats-officedocument.presentationml.presentation
    # `, `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
    # Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`,
    # `audio/amr`, `audio/ogg`, `audio/opus`  Supported options for video are:
    # `video/mp4`, `video/3gp`  Supported options for stickers are:
    # `image/webp`
    # @return [UploadMedia] response from the API call
    def upload_media(phone_number_id,
                     messaging_product,
                     file,
                     type)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/{Phone-Number-ID}/media',
                                     Server::DEFAULT)
                   .template_param(new_parameter(phone_number_id, key: 'Phone-Number-ID')
                                    .should_encode(true))
                   .form_param(new_parameter(messaging_product, key: 'messaging_product'))
                   .form_param(new_parameter(file, key: 'file'))
                   .form_param(new_parameter(type, key: 'type'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UploadMedia.method(:from_hash)))
        .execute
    end

    # To retrieve your mediaâ€™s URL, make a request to this endpoint. Later, you
    # can use this URL to download the media file.
    # @param [String] media_id Required parameter: Media object ID from either
    # uploading media endpoint or media message Webhooks
    # @return [RetrieveMediaURLResponse] response from the API call
    def retrieve_media_url(media_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/{Media-ID}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(media_id, key: 'Media-ID')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(RetrieveMediaURLResponse.method(:from_hash)))
        .execute
    end

    # This endpoint can be used for deleting a media object.
    # @param [String] media_id Required parameter: Media object ID from either
    # uploading media endpoint or media message Webhooks
    # @return [SuccessResponse] response from the API call
    def delete_media(media_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/{Media-ID}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(media_id, key: 'Media-ID')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SuccessResponse.method(:from_hash)))
        .execute
    end
  end
end
